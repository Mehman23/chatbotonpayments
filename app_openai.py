
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
import pandas as pd
from datetime import datetime
import os

import streamlit as st
import logging


my_key_openai = st.secrets["mykey_openai"]


llm_openai = ChatOpenAI(api_key = my_key_openai, model = "gpt-4o-mini", temperature=0.2, streaming=True)
embeddings = OpenAIEmbeddings(api_key = my_key_openai, model="text-embedding-3-large")


logging.basicConfig(filename='error_log.csv', level=logging.ERROR, 
                    format='%(asctime)s,%(levelname)s,%(message)s')

st.set_page_config(page_title="AI Lawyer Chatbot", page_icon="ü§ñ", layout="centered")

if "user_info_submitted" not in st.session_state:
    st.session_state.user_info_submitted = False

if not st.session_state.user_info_submitted:

    with st.form("user_info_form"):
        st.header("Lawyer on Payments Chatbot üí¨")
        st.write("M…ôlumatlarƒ±zƒ± daxil edin")
        
        name = st.text_input("Ad")
        surname = st.text_input("Soyad")
        department = st.text_input("Departament adƒ±")

        submit_button = st.form_submit_button("Daxil ol")
        
        if submit_button:
            if name and surname and department:
            
                st.session_state.user_info = {"name": name, "surname": surname, "department": department}
                st.session_state.user_info_submitted = True
                st.success("M…ôlumatlar qeyd edildi")
                st.rerun()

            else:
                st.warning("M…ôlumatlarƒ±zƒ± daxil edin")

    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("Created by **Az…ôrbaycan Respublikasƒ±nƒ±n M…ôrk…ôzi Bankƒ±** ¬© 2024", unsafe_allow_html=True)

else:
    st.title("üí¨ AI Lawyer Chatbot")
    st.divider()


    def get_final_prompt(prompt):

        user_messages = [msg["content"] for msg in reversed(st.session_state.messages) if msg["role"] == "user"]

        if len(user_messages) >= 2:
            previous_prompt = user_messages[1]
            latest_prompt = user_messages[0]
            full_query = previous_prompt + ". " + latest_prompt
        else:
            full_query = user_messages[0] if user_messages else ""

        try:

            new_vector_store = FAISS.load_local(
                "faiss_index_numeric_openai", embeddings, allow_dangerous_deserialization=True
                )

            retriever = new_vector_store.as_retriever()

            relevant_documents = retriever.invoke(full_query)

        except Exception as e:

            logging.error(f"Error loading FAISS index: {e}")

        context_data = " ".join([document.page_content for document in relevant_documents])

        final_prompt = f"""
        S…ôn…ô bir sual ver…ôc…ôm v…ô cavablandƒ±rmaq √º√ß√ºn √ñd…ôni≈ü xidm…ôtl…ôrinin f…ôaliyy…ôti √ß…ôr√ßiv…ôsind…ô Az…ôrbaycan Respublikasƒ±nƒ±n qanunvericiliyin…ô aid d√∂rd f…ôrqli m…ôlumat t…ôqdim ed…ôc…ôm. M…ôlumatlar 'Ba≈ülƒ±q: m…ôlumat' strukturundadƒ±r. Ba≈ülƒ±q h…ôr m…ôlumatƒ±n hansƒ± qanuna v…ô madd…ôy…ô aid olduƒüunu bildirir. 
        
        Cavab hazƒ±rlayark…ôn bu t…ôlimatlara diqq…ôt et:
        
        - ∆èg…ôr veril…ôn sual il…ô t…ôqdim edil…ôn m…ôlumatlarƒ±n m√∂vzusu uyƒüun deyils…ô, 'Baƒüƒ±≈ülayƒ±n,bu haqda d…ôqiq m…ôlumatƒ±m yoxdur. Ya da sizi s…ôhv ba≈üa d√º≈üd√ºm. Sualƒ±nƒ±zƒ± daha …ôtraflƒ± yazmanƒ±zƒ± xahi≈ü edir…ôm. M…ôn siz…ô √∂d…ôni≈ü xidm…ôtl…ôrinin f…ôaliyy…ôti √ß…ôr√ßiv…ôsind…ô k√∂m…ôklik g√∂st…ôr…ô bil…ôr…ôm.' b…ônz…ôr cavablar ver!
        - Cavabƒ±nƒ± sad…ô v…ô aydƒ±n dild…ô yaz.
        - G…ôr…ôklidirs…ô, izahƒ±nƒ± n√ºmun…ôl…ôrl…ô d…ôst…ôkl…ô.
        - Lazƒ±m olduqda, istinad etdiyin qanun v…ô madd…ôl…ôr haqqƒ±nda yaz.
        - Cavabƒ±nƒ± …ôtraflƒ±, lakin konkret v…ô d…ôqiq yaz.
        - Cavabƒ±nda s…ôn…ô m…ôlumatlar verildiyind…ôn b…ôhs etm…ô. S…ôn…ô m…ôlumat t…ôqdim edildiyini yazma.

        Sual: {prompt}
        M…ôlumatlar: {context_data}
        """
        return final_prompt

    if "messages" not in st.session_state:
        st.session_state.messages = []
        st.session_state.messages.append({"role": "system", "content": "s…ôn, h√ºquqi m√∂vzularƒ± sad…ô dild…ô izah ed…ôn robotsan."})

    for message in st.session_state.messages[1:]:
        role = message.get("role", "user")
        avatar = message.get("avatar", "üë®üèª" if role == "user" else "ü§ñ")
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message.get("content", ""))

    if prompt := st.chat_input("Sualƒ±nƒ±zƒ± yazƒ±n..."):
        
        st.session_state.messages.append({"role": "user", "content": prompt, "avatar": "üë®üèª"})
        st.chat_message("user", avatar="üë®üèª").markdown(prompt)

        response_text = ""
        with st.chat_message("assistant", avatar="ü§ñ") as assistant_message:
            response_placeholder = st.empty() 

            try:

                for token in llm_openai.stream(st.session_state.messages + [{"role": "user", "content": get_final_prompt(prompt)}]):
                    token_content = token.content
                    response_text += token_content
                    response_placeholder.markdown(response_text) 

            except Exception as ex:

                logging.error(f"Error streaming response: {ex}")
                st.error("Cavab ver…ôrk…ôn bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa sonra yenid…ôn c…ôhd edin.")

            st.session_state.messages.append({"role": "assistant", "content": response_text, "avatar": "ü§ñ"})

    feedback_pos_file = "feedback_pos.csv"
    feedback_neg_file = "feedback_neg.csv"

    if len(st.session_state.messages) > 2:

        col1, col2 = st.columns(2)

        with col1:
            if st.button("‚úÖ d√ºzg√ºn cavab"):

                try:

                    df_pos = pd.DataFrame({"user_name": st.session_state.user_info["name"],
                                        "user_surname": st.session_state.user_info["surname"],
                                        "user_department": st.session_state.user_info["department"],
                                        "respond": [st.session_state.messages], 
                                        "feedback": ["thumbs up"], 
                                        "user_comment": [""],
                                        "timestamp": datetime.now()})
                    df_pos.to_csv(feedback_pos_file, mode='a', header=not os.path.exists(feedback_pos_file), index=False, encoding='utf-8-sig')
                    st.success("R…ôy alƒ±ndƒ±.")

                except Exception as ex_pos:

                    logging.error(f"Error streaming response: {ex_pos}")
                    st.error("R…ôy yadda saxlanark…ôn bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa sonra yenid…ôn c…ôhd edin.")

        with col2:
            if st.button("‚ùå yanlƒ±≈ü cavab"):
                st.session_state.feedback = "thumbs down"
                
            if st.session_state.get("feedback") == "thumbs down":
                feedback_text = st.text_input("T…ôsvir edin")

                if st.button("T…ôsviri yadda saxla"):

                    try:

                        df_neg = pd.DataFrame({"user_name": st.session_state.user_info["name"],
                                            "user_surname": st.session_state.user_info["surname"],
                                            "user_department": st.session_state.user_info["department"],
                                            "respond": [st.session_state.messages], 
                                            "feedback": ["thumbs down"], 
                                            "user_comment": [feedback_text],
                                            "timestamp": datetime.now()})
                        df_neg.to_csv(feedback_neg_file, mode='a', header=not os.path.exists(feedback_neg_file), index=False, encoding='utf-8-sig')
                        st.success("R…ôy alƒ±ndƒ±.")
                        st.session_state.feedback = None

                    except Exception as ex_im:

                        logging.error(f"Error streaming response: {ex_im}")
                        st.error("T…ôsvir yadda saxlanark…ôn bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa sonra yenid…ôn c…ôhd edin.")
                
                elif feedback_text:

                    try:

                        df_neg = pd.DataFrame({"user_name": st.session_state.user_info["name"],
                                            "user_surname": st.session_state.user_info["surname"],
                                            "user_department": st.session_state.user_info["department"],
                                            "respond": [st.session_state.messages],
                                            "feedback": ["thumbs down"],
                                            "user_comment": [feedback_text],
                                            "timestamp": datetime.now()})
                        df_neg.to_csv(feedback_neg_file, mode='a', header=not os.path.exists(feedback_neg_file), index=False, encoding='utf-8-sig')
                        st.success("R…ôy alƒ±ndƒ±.")
                        st.session_state.feedback = None

                    except Exception as ex_im_2:

                        logging.error(f"Error streaming response: {ex_im_2}")
                        st.error("T…ôsvir yadda saxlanark…ôn bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa sonra yenid…ôn c…ôhd edin.")

                
                elif st.button("T…ôsvir etm…ôk ist…ômir…ôm"):

                    try:

                        df_neg = pd.DataFrame({"user_name": st.session_state.user_info["name"],
                                            "user_surname": st.session_state.user_info["surname"],
                                            "user_department": st.session_state.user_info["department"],
                                            "respond": [st.session_state.messages], 
                                            "feedback": ["thumbs down"], 
                                            "user_comment": [""],
                                            "timestamp": datetime.now()})
                        df_neg.to_csv(feedback_neg_file, mode='a', header=not os.path.exists(feedback_neg_file), index=False, encoding='utf-8-sig')
                        st.success("R…ôy alƒ±ndƒ±.")
                        st.session_state.feedback = None

                    except Exception as ex_im_2:

                        logging.error(f"Error streaming response: {ex_im_2}")
                        st.error("T…ôsvird…ôn imtina ed…ôrk…ôn bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa sonra yenid…ôn c…ôhd edin.")


                

